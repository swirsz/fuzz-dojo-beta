id: fuzz

name: Fuzz Dojo

image: stevenwirsz/fuzz-dojo:latest

description: |

  Projects show a project size in lines of code, code coverage percentages, and a compile time. 
  
  For example: `JSON - 8008 loc 68%-74%-94% - 45 sec`
  
  - `8008 loc` - This means that the source code has 8008 lines of code
  - `68%` - When fuzzing for 30 seconds after running `/challenge/loc` it will explore 68% of the project
  - `74%` - Google's OSS-Fuzz infrastructure performing continuous fuzzing explores 74% of the code
  - `94%` - static analysis shows that existing fuzz drivers have the theoretical ability to reach 94% of the code. This is not always accurate.
  - `45 seconds` - how long /challenge/loc requires to recalculate the code coverage when recompiling ONLY the fuzz drivers. The initial build requires more time, simply rebuilding with /challenge/build will require less time.

  Useful commands:

  `/challenge/build (sanitizer)` Run this first.  Compiles oss-fuzz project currently configured. Copies fuzz driver source code into `/home/hacker/fuzz-dojo/(project)` Project Source code is placed in: `/src-orig` - working code will be stored in `/src-{sanitizer}` such as `/src-none, /src-address, /src-memory /src-undefined and /src-thread` Fuzz drivers: `/out`
  
  - `(sanitizer)` is an OPTIONAL value of `none` (Default) `address memory undefined thread coverage` or `inspector`
  
  `/challenge/rebuild (sanitizer)` Recompiles ONLY the fuzz drivers and not the entire project.

  - `(sanitizer)` is an OPTIONAL value of `none` (Default) `address memory undefined thread coverage` or `inspector`
  
  `/out/(driver)` Runs a fuzz driver compiled with `/challenge/build`

  `/challenge/loc (sanitizer) (driver)` Compiles and runs all fuzz drivers for 30 seconds, reports LOC and functional coverage of each fuzz driver and the entire project.

  - `(sanitizer)` is an OPTIONAL value of `none` (Default) `address memory undefined` or `thread`

  - `(driver)` is an OPTIONAL value of exactly 1 fuzz driver to execute and provide coverage data.  If this is not provided, all of the fuzz drivers will be compiled. Example: 
  ```sh
  /challenge/loc newfuzzer
  ```

  `/challenge/fuzz-introspector` Compiles project and creates Fuzz Introspector report that can be viewed in a web browser under `Desktop`

  `report` Start Web server to view coverage report previously generated by `/challenge/loc`
   
  `fi-report` Start Web server to view coverage report previously generated by `/challenge/fuzz-introspector`

  `loc-report` View quick LOC report previously generated by `/challenge/loc`

  `find-drv (keyword)` Locates all fuzz drivers within `/src-orig`
  
  - `(keyword)` is an OPTIONAL value of a text string to search the source code for, rather than for fuzz drivers references

  `drivers` Lists all fuzz drivers within `/out`

  `test-crashes` Tests all crash files within the `/out` directory by executing all fuzz drivers with all crash files

  Important Resources:
  - [LibFuzzer Documentation](https://llvm.org/docs/LibFuzzer.html)
  - [More libfuzzer tips](https://chromium.googlesource.com/chromium/src/+/main/testing/libfuzzer/getting_started_with_libfuzzer.md)
  - [Efficient Fuzzing Guide](https://chromium.googlesource.com/chromium/src/+/main/testing/libfuzzer/efficient_fuzzing.md)
  - [**OSS-Fuzz**: Fuzzing Introspection](https://introspector.oss-fuzz.com/projects-overview)
  - [**OSS-Fuzz**: OSS-Fuzz - Setting up a new project](https://google.github.io/oss-fuzz/getting-started/new-project-guide/)
  - [**OSS-Fuzz**: Ideal integration](https://google.github.io/oss-fuzz/advanced-topics/ideal-integration/)
  - [**OSS-Fuzz**: Interesting fuzz driver creation case studies](https://github.com/ossf/fuzz-introspector/blob/main/doc/CaseStudies.md)
  - [**GITHUB**: How to contribute to a project through forking](https://docs.github.com/en/get-started/quickstart/contributing-to-projects)
  - [Keyword Search all OSS-Fuzz fuzz drivers](https://github.com/search?q=repo%3Agoogle%2Foss-fuzz+path%3A%2F%5Eprojects%5C%2F%2F++AND+%28language%3AC%2B%2B+OR+language%3AC%29&type=code)

modules:

  - id: training
    name: Training Exercises
    description: Learn techniques to improve the code coverage of fuzz driver harnesses

    challenges:

      - id: 1-locate
        name: Locate Harnesses
        description: Locate the fuzz harnesses in a project.  Run /challenge/training in Terminal to start.

      - id: 2-change
        name: Modify a Fuzzing Harness
        description: Make a change to a fuzzing harness.  Run /challenge/training in Terminal to start.

      - id: 3-broken
        name: Fix Broken Fuzzing Harness
        description: Repair a broken fuzzing harness.  Run /challenge/training in Terminal to start.

      - id: 4-parameters
        name: Initial Parameters
        description: Increase code coverage by selecting better initial parameters.  Run /challenge/training in Terminal to start.

      - id: 5-calltree
        name: Improve Coverage Using the Call Tree
        description: Find a function higher in the call tree that calls this function and fuzz it instead.  Run /challenge/training in Terminal to start.

      - id: 6-split
        name: Split Into Multiple Harness
        description: Break large complicated fuzz drivers into multiple individual drivers.  Run /challenge/training in Terminal to start.

      - id: 7-sanitizer
        name: Correct Sanitizer Specific Problems
        description: Identify the sanitizer that is crashing and repair it.  Run /challenge/training in Terminal to start.

      - id: 8-seedcorpus
        name: Implement Seed Corpus
        description: Implement a seed corpus.  Run /challenge/training in Terminal to start.

      - id: 9-newdriver
        name: Create New Fuzz Driver
        description: Search for unreached code within a project and create a simple fuzz driver to increase total project code coverage.  Run /challenge/training in Terminal to start.

      - id: 10-crash
        name: Diagnose Crash Files
        description: When compiling ZLIB crashes are produced. Why is this occurring? Run /challenge/training in Terminal to start.

    resources:
    
      - name: "pwn.college - Getting Started"
        type: lecture
        video: DJO1A2neZ6Y
        
      - name: "Fuzzing: Introduction"
        type: lecture
        video: K_2DAo5pPQQ
              
      - name: "Features of the Fuzz Dojo"
        type: lecture
        video: u7GrifELIjU
              
      - name: "Investigating a Project & Picking a Function to Fuzz"
        type: lecture
        video: OP22mPweQbU
              
      - name: "Understanding Existing Fuzz Drivers"
        type: lecture
        video: AtjkUvYOGJw
              
      - name: "AVAHI: New Fuzz Driver Creation"
        type: lecture
        video: 11fxFrOOLJ0
              
      - name: "BZIP2: Case Study Extending 62% Static Code Coverage to 92%"
        type: lecture
        video: LRpm2kd9vQI

      - name: "cJSON: Case Study extending 27% Static Code Coverage to 73%"
        type: lecture
        video: KOHb0y_Oiko

      - name: "OSS Fuzz Driver Development"
        type: lecture
        video: gvA0cXxG4cg
        slides: 1eJ7y0pYSBVFg9cT353-IPF8FHI0AWGfpTh0vKcrlLk8

  - id: projects
    name: OSS-Fuzz Projects
    description: Improve a OSS-Fuzz driver by 5% or more to achieve the flag.

    challenges:

      - id: apache-httpd
        name: APACHE-HTTPD - medium 48312 loc 12%-14%-6% - 5.5 min

      - id: arduinojson
        name: ARDUINOJSON - simple 3599 loc 49%-49%-99% - 1 min

      - id: avahi
        name: (D) AVAHI - simple 2566 loc 73%-76%-81% - 2 min

      - id: boost
        name: BOOST - medium 11995 loc 43%-57%--% - 10 min (no FI)

      - id: bzip2
        name: (D) BZIP2 - medium 2661 loc 74%-92%-99% - 1 min

      - id: c-ares
        name: C-ARES - medium 5676 loc 35%-39%-72% - 2.5 min

      - id: casync
        name: CASYNC - medium 1678 loc 11%-10%-14% - 1 min

      - id: cjson
        name: CJSON - simple 2304 loc 43%-43%-46% - 1 min

      - id: cmark
        name: (D) CMARK - medium 14688 loc 81%-95%-82% - 1 min

      - id: cppcheck
        name: (D) CPPCHECK - complex 79321 loc 20%-24%-24% (broken on oss-fuzz) - 1.5 min

      - id: elfutils
        name: ELFUTILS - simple 31383 loc 9%-26%-40% - 2.5 min

      - id: example
        name: (D) EXAMPLE - simple 20 loc 100% - 1 min
        description: Sample OSS-Fuzz project

      - id: exiv2
        name: EXIV2 - simple 34282 loc 10%-54%-1% - 1 min
 
      - id: fmt
        name: FMT - complex 5904 loc 77%-81%-13% - 4 min (slow FI)

      - id: gfwx
        name: (D) GFWX - medium 1087 loc 88%-85%--% - 1.75 min

      - id: guetzli
        name: GUETZLI - simple 5648 loc 79%-80%-72% - 1 min

      - id: haproxy
        name: (D) HAPROXY - simple 106108 loc 1%-1%-2% - 7 min (broken on OSS-Fuzz)

      - id: igraph
        name: IGRAPH - complex 57124 loc 20%-62%-44% - 4 min (slow FI)
        
      - id: janus-gateway
        name: JANUS-GATEWAY - complex 6131 loc 36%-37%-34% - 1.5 min

      - id: json
        name: JSON - simple 8008 loc 68%-74%-94% - 1 min

      - id: kamailio
        name: KAMAILIO - simple 83091 loc 4%-10%-11% (no FI) - 5 min

      - id: lame
        name: LAME - complex 23539 loc 40% (broken on OSS-Fuzz)

      - id: liblouis
        name: LIBLOUIS - medium 10478 loc 36%-60%-92% - 4 min
        
      - id: libpng
        name: LIBPNG - medium 13217 loc 40%-43%-57% - 1.5 min

      - id: libsass
        name: LIBSASS - simple 19723 loc 29%-26%-4% (no FI) - 1 min

      - id: libsodium
        name: LIBSODIUM - simple 8403 loc 18%-19%-12% - 2 min

      - id: libssh2
        name: LIBSSH2 - medium 12632 loc 9%-20%-26% - 2 min

      - id: libvnc
        name: LIBVNC - medium 10793 loc 16%-19%-22% - 3.5 min

      - id: libvpx
        name: LIBVPX - medium 32885 loc 54%-60%-0% - 2.5 min
 
      - id: lighttpd
        name: LIGHTTPD - simple 1310 loc 36%-35%-47% - 2 min

      - id: miniz
        name: MINIZ - medium 5423 loc 56%-60%-74% - 1 min

      - id: minizip
        name: MINIZIP - medium 3639 loc 75%-76%-64% - 45 sec
        
      - id: mpg123
        name: MPG123 - medium 9826 loc 39%-52%-43% - 2 min

      - id: mupdf
        name: MUPDF - medium 289131 loc 25%-36%--% (no FI) - 12 min

      - id: openjpeg
        name: OPENJPEG - complex 22939 loc 5%--%-4% - 2 min

      - id: opensips
        name: OPENSIPS - medium 62114 loc 10%-13%-17% - 4 min (slow FI)

      - id: openssh
        name: OPENSSH - medium 27975 loc 25%-29%-36% - 13 min

      - id: pcre2
        name: PCRE2 - medium 33249 loc 57%-80%-96% - 11 min (slow FI)

      - id: pycryptodome
        name: PYCRYPTODOME - simple 1398 loc 80%-80%-79% - 1 min

      - id: snappy
        name: SNAPPY - simple 1502 loc 67%-67%-61% - 1 min

      - id: speex
        name: SPEEX - complex 5867 loc 80%--%--% - 4.5 min

      - id: sqlite3
        name: SQLITE3 - medium 80385 loc 33%-75%-76% - 5 min (slow FI)
        
      - id: tmux
        name: TMUX - medium 48752 loc 12%-12%-31% - 1.5 min

      - id: unrar
        name: UNRAR - medium 13209 loc 8%-58%-86% - 1.5 min

      - id: uriparser
        name: URIPARSER - medium 4606 loc 72%-81%-93% - 45 sec

      - id: usbguard
        name: USBGUARD - simple 3525 loc 39%-41%-93% (no FI) - 2 min

      - id: valijson
        name: VALIJSON - simple 3566 loc 68%-72%-52% - 1.5 min (slow FI)

      - id: vorbis
        name: VORBIS - simple 8745 loc 31%-35%-36% - 2.5 min

      - id: w3m
        name: W3M - simple 6400 loc 66%-70%-30% - 1 min

      - id: wasm3
        name: WASM3 - simple 4107 loc 34%-65%-22% - 1 min

      - id: wavpack
        name: WAVPACK - complex 4172 loc 73%-84%-96% - 1.5 min

      - id: woff2
        name: WOFF2 - simple 3985 loc 71%-87%-89% - 3 min

      - id: xvid
        name: XVID - medium 13782 loc 10%-33%-- - 1.5 min
        
      - id: xz
        name: XZ - simple 3414 loc 69%-71%-12% - 2 min

      - id: yara
        name: YARA - simple 30443 loc 49%-63%-43% - 3 min

      - id: zlib
        name: ZLIB - complex 5055 loc 78%-79%-87% - 1 min

      - id: zopfli
        name: (D) ZOPFLI - simple 2221 loc 77%-94%-99% - 1 min
