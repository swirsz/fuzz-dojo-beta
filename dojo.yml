id: fuzz

name: Fuzz Dojo
type: public
award:
  emoji: üêá

image: stevenwirsz/fuzz-dojo:latest

description: |

        Forum link: https://discord.com/channels/750635557666816031/1409993436328759328

        Fuzzing is a powerful technique used in both academia and industry to automate software testing.  It has also become the standard approach for discovering zero-day vulnerabilities.  Google considers fuzzing to be their first line of defense, and has built an open source version of their fuzzing platform, known as OSS-Fuzz, to continually test popular open source software.  OSS-Fuzz has been used successfully in over a thousand projects.  However, due to its limitations, only about 30% of the code typically gets tested, leaving 70% unevaluated.

        You will learn in this dojo how to create and improve fuzz testing drivers for real-world software.  You will have access to a wide array of training materials and have the opportunity to create two new real fuzz drivers, with the option to submit your work to Google for a monetary compensation of up to $10,000.  New fuzz drivers should increase the overall project code coverage, cover a wide range of API functions and data dependencies, and achieve a good speed of executions/sec.

        Initial Survey https://forms.gle/FWF1iEn9pLpkRMGq9 
        
        Exit Survey https://forms.gle/uG8yik8pXFRXQHSGA  
        
        The first 30 participants to complete the module and the surveys will be rewarded with a $50 Amazon gift card upon completion of the study.  Valid email address required.  Limit 1 submission per person.

modules:

  - id: consent
    name: Consent Form
    description: Contribute by allowing your anonymous, non-personalized work in this module to be used for research

    challenges:

      - id: consent
        name: Consent
        description:  Run /challenge/run in Terminal to start.

  - id: training
    name: Introduction to Fuzzing
    description: |

        Important Resources:
        - [LibFuzzer Documentation](https://llvm.org/docs/LibFuzzer.html)
        - [More libfuzzer tips](https://chromium.googlesource.com/chromium/src/+/main/testing/libfuzzer/getting_started_with_libfuzzer.md)
        - [Efficient Fuzzing Guide](https://chromium.googlesource.com/chromium/src/+/main/testing/libfuzzer/efficient_fuzzing.md)
        - [**OSS-Fuzz**: Fuzzing Introspection](https://introspector.oss-fuzz.com/projects-overview)
        - [**OSS-Fuzz**: OSS-Fuzz - Setting up a new project](https://google.github.io/oss-fuzz/getting-started/new-project-guide/)
        - [**OSS-Fuzz**: Ideal integration](https://google.github.io/oss-fuzz/advanced-topics/ideal-integration/)
        - [**OSS-Fuzz**: Interesting fuzz driver creation case studies](https://github.com/ossf/fuzz-introspector/blob/main/doc/CaseStudies.md)
        - [**GITHUB**: How to contribute to a project through forking](https://docs.github.com/en/get-started/quickstart/contributing-to-projects)
        - [Keyword Search all OSS-Fuzz fuzz drivers](https://github.com/search?q=repo%3Agoogle%2Foss-fuzz+path%3A%2F%5Eprojects%5C%2F%2F++AND+%28language%3AC%2B%2B+OR+language%3AC%29&type=code)

    resources:
        
      - name: "pwn.college - Getting Started"
        type: lecture
        video: DJO1A2neZ6Y
        
      - name: "Introduction to Fuzzing"
        type: lecture
        video: K_2DAo5pPQQ

      - name: "AVAHI: Understanding Existing Fuzz Drivers"
        type: lecture
        video: AtjkUvYOGJw
        
      - name: "Investigating a Project & Picking Functions to Fuzz"
        type: lecture
        video: OP22mPweQbU
        slides: 1nJ82sezXrM9U0TWRJmCKyhaX38ySCO2v34q3kxyxZTA
    
      - name: "Fuzz Dojo only: Building and Running Reports"
        type: lecture
        video: u7GrifELIjU
        slides: 1-JxZd7rNU8JBiCdbyfg37YrJM0w70jOx3-2vAZg0hx0
              
      - name: "OSS Fuzz only: Building and Running Reports"
        type: lecture
        video: gvA0cXxG4cg
        slides: 1eJ7y0pYSBVFg9cT353-IPF8FHI0AWGfpTh0vKcrlLk8
        
      - name: "AVAHI: New Fuzz Driver Creation"
        type: lecture
        video: 11fxFrOOLJ0
    
      - name: "BZIP2: Case Study Extending 62% Static Code Coverage to 92%"
        type: lecture
        video: LRpm2kd9vQI

      - name: "cJSON: Case Study extending 27% Static Code Coverage to 70%"
        type: lecture
        video: KOHb0y_Oiko
        slides: 1Da3GXF5fJjJdF5JhO6VDYcNbz3wCSXOLJPKueyCdEBw

      - name: "Submitting your fuzz driver to Google"
        type: lecture
        slides: 1wY-6xqYhhzf4uf272UMjHPh8KZ4sc1fjgcKuGrsa4ks

    challenges:

      - id: 1-locate
        name: Locate Harnesses
        description: Locate the fuzz harnesses in a project.  Run /challenge/training in Terminal to start.

      - id: 2-change
        name: Modify a Fuzzing Harness
        description: Make a change to a fuzzing harness.  Run /challenge/training in Terminal to start.

      - id: 3-broken
        name: Fix Broken Fuzzing Harness
        description: Repair a broken fuzzing harness.  Run /challenge/training in Terminal to start.

      - id: 4-parameters
        name: Initial Parameters
        description: Increase code coverage by selecting better initial parameters.  Run /challenge/training in Terminal to start.

      - id: 5-calltree
        name: Improve Coverage Using the Call Tree
        description: Find a function higher in the call tree that calls this function and fuzz it instead.  Run /challenge/training in Terminal to start.

      - id: 6-seedcorpus
        name: Implement Seed Corpus
        description: Implement a seed corpus.  Run /challenge/training in Terminal to start.

      - id: 7-newdriver
        name: Create New Fuzz Driver
        description: Search for unreached code within a project and create a simple fuzz driver to increase total project code coverage.  Run /challenge/training in Terminal to start.

      - id: 8-oss-build
        name: OSS-Fuzz - Build a Project
        description: OSS-Fuzz challenges simulate a clean linux setup with only the OSS-Fuzz library available. Learn how to compile a project using only OSS-Fuzz.

      - id: 9-oss-loc
        name: OSS-Fuzz - Code Coverage
        description: Run a code coverage report in this challenge

      - id: 10-oss-fi
        name: OSS-Fuzz - Fuzz Introspector
        description: Run a Fuzz Introspector report

  - id: exercises
    name: Real World Fuzzing
    
    challenges:

      - id: level-1-0
        name: Level 1.0 Practice

      - id: level-1-1
        name: Level 1.1 Practice

      - id: level-2-0
        name: Level 2.0 Project

      - id: level-2-1
        name: Level 2.1 Project

  - id: projects
    name: All Projects
    
    challenges:

      - id: alembic
        name: ALEMBIC - medium 12569 loc 1%-9%-0% - 1 min (slow FI)

      - id: apache-httpd
        name: APACHE-HTTPD - medium 48312 loc 12%-14%-6% - 5.5 min

      - id: arduinojson
        name: (D) ARDUINOJSON - simple 3599 loc 99%-99%-99% - 1 min

      - id: args
        name: ARGS - simple 1796 loc 22%-22%-47% - 3 min

      - id: aspell
        name: ASPELL - complex 14390 loc 58%-67%-26% - 2 min

      - id: astc-encoder
        name: ASTC-ENCODER - simple 2941 loc - 50%-50%-74% - 1.5 min

      - id: avahi
        name: (D) AVAHI - simple 2566 loc 73%-76%-81% - 2 min

      - id: boost
        name: BOOST - medium 11995 loc 43%-57%--% - 10 min (no FI)

      - id: bzip2
        name: (D) BZIP2 - medium 2661 loc 74%-92%-99% - 1 min

      - id: c-ares
        name: C-ARES - medium 5676 loc 35%-39%-72% - 2.5 min

      - id: casync
        name: CASYNC - medium 1678 loc 11%-10%-14% - 1 min

      - id: cjson
        name: (D) CJSON - simple 2304 loc 43%-43%-46% - 1 min

      - id: cmark
        name: (D) CMARK - medium 14688 loc 81%-95%-82% - 1 min

      - id: cppcheck
        name: (D) CPPCHECK - complex 79321 loc 20%-24%-24% (broken on oss-fuzz) - 1.5 min

      - id: elfutils
        name: ELFUTILS - simple 31383 loc 9%-26%-40% - 2.5 min

      - id: example
        name: (D) EXAMPLE - simple 20 loc 100% - 1 min
        description: Sample OSS-Fuzz project

      - id: exiv2
        name: EXIV2 - simple 34282 loc 10%-54%-1% - 1 min
 
      - id: fmt
        name: FMT - complex 5904 loc 77%-81%-13% - 4 min (slow FI)

      - id: gfwx
        name: (D) GFWX - medium 1087 loc 88%-85%--% - 1.75 min

      - id: guetzli
        name: GUETZLI - simple 5648 loc 79%-80%-72% - 1 min

      - id: haproxy
        name: (D) HAPROXY - simple 106108 loc 1%-1%-2% - 7 min (broken on OSS-Fuzz)

      - id: igraph
        name: IGRAPH - complex 57124 loc 20%-62%-44% - 4 min (slow FI)
        
      - id: janus-gateway
        name: JANUS-GATEWAY - complex 6131 loc 36%-37%-34% - 1.5 min

      - id: json
        name: JSON - simple 8008 loc 68%-74%-94% - 1 min

      - id: kamailio
        name: KAMAILIO - simple 83091 loc 4%-10%-11% (no FI) - 5 min

      - id: lame
        name: (D) LAME - complex 23539 loc 40% (broken on OSS-Fuzz)

      - id: liblouis
        name: LIBLOUIS - medium 10478 loc 36%-60%-92% - 4 min
        
      - id: libpng
        name: LIBPNG - medium 13217 loc 40%-43%-57% - 1.5 min

      - id: libsass
        name: LIBSASS - simple 19723 loc 29%-26%-4% (no FI) - 1 min

      - id: libsodium
        name: LIBSODIUM - simple 8403 loc 18%-19%-12% - 2 min

      - id: libssh2
        name: LIBSSH2 - medium 12632 loc 9%-20%-26% - 2 min

      - id: libvnc
        name: LIBVNC - medium 10793 loc 16%-19%-22% - 3.5 min

      - id: libvpx
        name: LIBVPX - medium 32885 loc 54%-60%-0% - 2.5 min
 
      - id: lighttpd
        name: LIGHTTPD - simple 1310 loc 36%-35%-47% - 2 min

      - id: miniz
        name: MINIZ - medium 5423 loc 56%-60%-74% - 1 min

      - id: minizip
        name: MINIZIP - medium 3639 loc 75%-76%-64% - 45 sec
        
      - id: mpg123
        name: MPG123 - medium 9826 loc 39%-52%-43% - 2 min

      - id: mupdf
        name: MUPDF - medium 289131 loc 25%-36%--% (no FI) - 12 min

      - id: openjpeg
        name: OPENJPEG - complex 22939 loc 5%--%-4% - 2 min

      - id: opensips
        name: OPENSIPS - medium 62114 loc 10%-13%-17% - 4 min (slow FI)

      - id: openssh
        name: OPENSSH - medium 27975 loc 25%-29%-36% - 13 min

      - id: pcre2
        name: (D) PCRE2 - medium 33249 loc 57%-80%-96% - 11 min (slow FI)

      - id: pycryptodome
        name: (D) PYCRYPTODOME - simple 1398 loc 80%-80%-79% - 1 min

      - id: snappy
        name: SNAPPY - simple 1502 loc 67%-67%-61% - 1 min

      - id: speex
        name: (D) SPEEX - complex 5867 loc 80%--%--% - 4.5 min

      - id: sqlite3
        name: SQLITE3 - complex 80385 loc 33%-75%-76% - 5 min (slow FI)
        
      - id: tmux
        name: TMUX - medium 48752 loc 12%-12%-31% - 1.5 min

      - id: unrar
        name: UNRAR - medium 13209 loc 8%-58%-86% - 1.5 min

      - id: uriparser
        name: (D) URIPARSER - medium 4606 loc 72%-81%-93% - 45 sec

      - id: usbguard
        name: USBGUARD - simple 3525 loc 39%-41%-93% (no FI) - 2 min

      - id: valijson
        name: VALIJSON - simple 3566 loc 68%-72%-52% - 1.5 min (slow FI)

      - id: vorbis
        name: VORBIS - simple 8745 loc 31%-35%-36% - 2.5 min

      - id: w3m
        name: W3M - simple 6400 loc 66%-70%-30% - 1 min

      - id: wasm3
        name: WASM3 - simple 4107 loc 34%-65%-22% - 1 min

      - id: wavpack
        name: (D) WAVPACK - complex 4172 loc 73%-84%-96% - 1.5 min

      - id: woff2
        name: (D) WOFF2 - simple 3985 loc 71%-87%-89% - 3 min

      - id: xvid
        name: XVID - medium 13782 loc 10%-33%-- - 1.5 min
        
      - id: xz
        name: XZ - simple 3414 loc 69%-71%-12% - 2 min

      - id: yara
        name: YARA - simple 30443 loc 49%-63%-43% - 3 min

      - id: zlib
        name: ZLIB - complex 5055 loc 78%-79%-87% - 1 min

      - id: zopfli
        name: (D) ZOPFLI - simple 2221 loc 77%-94%-99% - 1 min
    