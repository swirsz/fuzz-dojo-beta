id: fuzz

name: Fuzz Dojo
type: hidden
award:
  emoji: üêá

image: stevenwirsz/fuzz-dojo:latest

description: |

        Welcome and thank you for your participation in this study. Your help to advance cybersecurity research is greatly appreciated! Please follow the steps below:

        - `Step 1:` Complete Initial Survey at https://forms.gle/FWF1iEn9pLpkRMGq9
        
        - `Step 2:` Complete the `Consent Form` (see modules below)
        
        - `Step 3:` Complete the `Fuzzing Challenges` which are composed of OSS-Fuzz and Fuzz Dojo configurations.  Code that can be used to solve level 1 is provided in the cJSON training video.  The level 2 challenges are randomized.

            For each study project, create a new fuzz driver to improve the project's code coverage. A flag is awarded when the code coverage is improved by 5% or more. Participants are encouraged to improve the code as much as possible within the study duration, and projects may be revisited at any time to continue optimization. The goals are to increase project code coverage, to cover a wide range of API functions and data dependencies, and achieve a good speed of executions/sec when running the fuzz driver.

            See the videos and slides under `Training` to get started.  Fuzz-Dojo specific commands are shown on this page, `oss_help` displays oss-fuzz specific commands.  
            
            Although the most promising method to gain additional code coverage is to write a new fuzz driver, optional training projects are also provided to demonstrate additional techniques to increase code coverage.

        - `Step 4:` Complete Exit Survey at https://forms.gle/uG8yik8pXFRXQHSGA

modules:

  - id: consent
    name: Consent Form
    description: Contribute by allowing your anonymous, non-personalized work in this module to be used for research

    challenges:

      - id: consent
        name: Consent
        description:  Run /challenge/run in Terminal to start.

  - id: training
    name: Training (optional)
    description: |

        Improve a OSS-Fuzz project code coverage by 5% or more to achieve the flag.
        
        ---

        Fuzz-Dojo commands:  
        
        Note that these are only available in fuzz-dojo  challenges. For OSS-Fuzz challenges, `oss_help` displays oss-fuzz specific commands.

        `/challenge/comments` Add comments to existing fuzz drivers to demonstrate your understanding of their operation.

        `/challenge/plan` Develop a conceptual plan to create a new fuzz driver

        `/challenge/build (sanitizer)` Run this first.  Compiles oss-fuzz project currently configured. Copies fuzz driver source code into `/home/hacker/fuzz-dojo/(project)` Project Source code is placed in `/src-orig` - working code will be stored in `/src-{sanitizer}` such as `/src-none, /src-address, /src-memory /src-undefined and /src-thread` Fuzz drivers are placed in `/out`

        - `(sanitizer)` is an OPTIONAL value of `none` (Default) `address memory undefined thread coverage` or `inspector`

        `/challenge/rebuild (sanitizer)` Recompiles ONLY the fuzz drivers and not the entire project.  NOTE This function primarily checks for compile errors. It may or may not replace the compiled fuzz driver in the /OUT directory!

        - `(sanitizer)` is an OPTIONAL value of `none` (Default) `address memory undefined thread coverage` or `inspector`

        `/out/(driver)` Runs a fuzz driver compiled with `/challenge/build`

        `/challenge/loc (sanitizer) (driver)` Compiles and runs all fuzz drivers for 30 seconds, reports LOC and functional coverage of each fuzz driver and the entire project.

        - `(sanitizer)` is an OPTIONAL value of `none` (Default) `address memory undefined` or `thread`

        - `(driver)` is an OPTIONAL value of exactly 1 fuzz driver to execute and provide coverage data.  If this is not provided, all of the fuzz drivers will be compiled. Example: 
        ```sh
        /challenge/loc newfuzzer
        ```

        `/challenge/fuzz-introspector` Compiles project and creates Fuzz Introspector report that can be viewed in a web browser under `Desktop`

        `report` Start Web server to view coverage report previously generated by `/challenge/loc`

        `fi-report` Start Web server to view coverage report previously generated by `/challenge/fuzz-introspector`

        `loc-report` View quick LOC report previously generated by `/challenge/loc`

        `find-drv (keyword)` Locates all fuzz drivers within `/src-orig`

        - `(keyword)` is an OPTIONAL value of a text string to search the source code for, rather than for fuzz drivers references

        `drivers` Lists all fuzz drivers within `/out`

        `test-crashes` Tests all crash files within the `/out` directory by executing all fuzz drivers with all crash files
        
        ---

        Refine your fuzz drivers to increase code coverage.

        * Run a fuzz introspector report and view the call tree, looking at unreached sections, and determine why these areas are not being hit.

        * Vary the structure and constraints on your input data. Are many runs failing early due to invalid data types?

        * Could different parameter combinations hit code not currently being reached?

        * Examine the functions being called. Could you call functions higher on the call tree to reach more code?

        * Experiment with different sanitizers and check for hidden errors, revealed by fuzzing runs with address, undefined, thread, and memory sanitizers.

        * Are you using a seed corpus?   Can you make this corpus more diverse and also remove redundant samples?

        * Could implementing additional preconditions be necessary to fulfill control dependencies needed for untouched code?  I.E., do you need to open a file before you can read from it?

        * Look for complex branch conditions involving checksums, hashes, or magic values.  Could you add custom comparators to your fuzz driver, or bypass these checks by calling functions beyond them?

        * Are timeouts or memory errors occurring when running your fuzz driver?

        * Can you improve performance by testing and optimizing your code?

        * Do you see the need to extend your fuzz driver by calling additional functions or by creating a different new fuzz driver entirely?

        Practical examples of fuzz driver improvements may be found in the training exercises.

        ---

        Important Resources:
        - [LibFuzzer Documentation](https://llvm.org/docs/LibFuzzer.html)
        - [More libfuzzer tips](https://chromium.googlesource.com/chromium/src/+/main/testing/libfuzzer/getting_started_with_libfuzzer.md)
        - [Efficient Fuzzing Guide](https://chromium.googlesource.com/chromium/src/+/main/testing/libfuzzer/efficient_fuzzing.md)
        - [**OSS-Fuzz**: Fuzzing Introspection](https://introspector.oss-fuzz.com/projects-overview)
        - [**OSS-Fuzz**: OSS-Fuzz - Setting up a new project](https://google.github.io/oss-fuzz/getting-started/new-project-guide/)
        - [**OSS-Fuzz**: Ideal integration](https://google.github.io/oss-fuzz/advanced-topics/ideal-integration/)
        - [**OSS-Fuzz**: Interesting fuzz driver creation case studies](https://github.com/ossf/fuzz-introspector/blob/main/doc/CaseStudies.md)
        - [**GITHUB**: How to contribute to a project through forking](https://docs.github.com/en/get-started/quickstart/contributing-to-projects)
        - [Keyword Search all OSS-Fuzz fuzz drivers](https://github.com/search?q=repo%3Agoogle%2Foss-fuzz+path%3A%2F%5Eprojects%5C%2F%2F++AND+%28language%3AC%2B%2B+OR+language%3AC%29&type=code)
        
        The challenges below will demonstrate techniques to improve the code coverage of existing fuzz drivers

    resources:
        
      - name: "pwn.college - Getting Started"
        type: lecture
        video: DJO1A2neZ6Y
        
      - name: "Introduction to Fuzzing"
        type: lecture
        video: K_2DAo5pPQQ

      - name: "AVAHI: Understanding Existing Fuzz Drivers"
        type: lecture
        video: AtjkUvYOGJw
        
      - name: "Investigating a Project & Picking Functions to Fuzz"
        type: lecture
        video: OP22mPweQbU
        slides: 1nJ82sezXrM9U0TWRJmCKyhaX38ySCO2v34q3kxyxZTA
    
      - name: "Fuzz Dojo only: Building and Running Reports"
        type: lecture
        video: u7GrifELIjU
              
      - name: "OSS Fuzz only: Building and Running Reports"
        type: lecture
        video: gvA0cXxG4cg
        slides: 1eJ7y0pYSBVFg9cT353-IPF8FHI0AWGfpTh0vKcrlLk8
        
      - name: "AVAHI: New Fuzz Driver Creation"
        type: lecture
        video: 11fxFrOOLJ0
    
      - name: "BZIP2: Case Study Extending 62% Static Code Coverage to 92%"
        type: lecture
        video: LRpm2kd9vQI

      - name: "cJSON: Case Study extending 27% Static Code Coverage to 70%"
        type: lecture
        video: KOHb0y_Oiko
        slides: 1Da3GXF5fJjJdF5JhO6VDYcNbz3wCSXOLJPKueyCdEBw

      - name: "Submitting your fuzz driver to Google"
        type: lecture
        slides: 1wY-6xqYhhzf4uf272UMjHPh8KZ4sc1fjgcKuGrsa4ks

    challenges:

      - id: 1-locate
        name: Locate Harnesses
        description: Locate the fuzz harnesses in a project.  Run /challenge/training in Terminal to start.

      - id: 2-change
        name: Modify a Fuzzing Harness
        description: Make a change to a fuzzing harness.  Run /challenge/training in Terminal to start.

      - id: 3-broken
        name: Fix Broken Fuzzing Harness
        description: Repair a broken fuzzing harness.  Run /challenge/training in Terminal to start.

      - id: 4-parameters
        name: Initial Parameters
        description: Increase code coverage by selecting better initial parameters.  Run /challenge/training in Terminal to start.

      - id: 5-calltree
        name: Improve Coverage Using the Call Tree
        description: Find a function higher in the call tree that calls this function and fuzz it instead.  Run /challenge/training in Terminal to start.

      - id: 6-seedcorpus
        name: Implement Seed Corpus
        description: Implement a seed corpus.  Run /challenge/training in Terminal to start.

      - id: 7-newdriver
        name: Create New Fuzz Driver
        description: Search for unreached code within a project and create a simple fuzz driver to increase total project code coverage.  Run /challenge/training in Terminal to start.

  - id: exercises
    name: Fuzzing Challenges
    
    challenges:

      - id: level-1-0
        name: Level 1.0 Practice

      - id: level-1-1
        name: Level 1.1 Practice

      - id: level-2-0
        name: Level 2.0 Project

      - id: level-2-1
        name: Level 2.1 Project
