#!/opt/pwn.college/bash
. /usr/local/sbin/e
export LABEL=$1
export PROJECT_NAME=astc-encoder
SANITIZER=$1
if [ -z "$SANITIZER" ]; then
    SANITIZER='none'
    export LABEL='none'
fi

SRC=/src-$LABEL
if [ -z "$(find /out -mindepth 1 -maxdepth 1)" ] || [ ! -d "$SRC" ]; then
    echo "Run /challenge/build first"
    rm /tmp/build.lck
else 

if [ "$LABEL" = "none" ]; then
    export FLAGS=""
elif [ "$LABEL" = "address" ]; then
    export FLAGS=$SANITIZER_FLAGS_address
elif [ "$LABEL" = "memory" ]; then
    export FLAGS=$SANITIZER_FLAGS_memory
elif [ "$LABEL" = "undefined" ]; then
    export FLAGS=$SANITIZER_FLAGS_undefined
elif [ "$LABEL" = "thread" ]; then
    export FLAGS=$SANITIZER_FLAGS_thread
fi
set -x
#----------------------------------------------------------------------

cp /home/hacker/fuzz-dojo/$PROJECT_NAME/*.cpp $SRC/$PROJECT_NAME/Source/Fuzzers
cp /home/hacker/fuzz-dojo/$PROJECT_NAME/build.sh $SRC

cd $SRC/$PROJECT_NAME/Source

for fuzzer in ./Fuzzers/fuzz_*.cpp; do
  $CXX $CXXFLAGS \
      -DASTCENC_SSE=0 \
      -DASTCENC_AVX=0 \
      -DASTCENC_POPCNT=0 \
      -I. -std=c++14  -pthread $fuzzer $LIB_FUZZING_ENGINE ./libastcenc.a \
      -o $OUT/$(basename -s .cpp $fuzzer)
done  
#----------------------------------------------------------------------
drivers
fi
