#!/opt/pwn.college/bash
echo 51 > /tmp/initial
echo 56 > /tmp/target
if [ "$1" = "afl" ]; then
    . /usr/local/sbin/eafl
    shift
else
    . /usr/local/sbin/e
fi
export PROJECT_NAME=libxml2
export SANITIZER=$1
[ -z "$SANITIZER" ] && export SANITIZER='none'
cd $SRC

#apt-get update && \
#    apt-get install -y --no-install-recommends \
#        make autoconf libtool pkg-config \
#        zlib1g-dev zlib1g-dev:i386 liblzma-dev liblzma-dev:i386
# Build requires automake 1.16.3
#curl -LO http://mirrors.kernel.org/ubuntu/pool/main/a/automake-1.16/automake_1.16.5-1.3_all.deb && \
#git clone --depth 1 https://gitlab.gnome.org/GNOME/libxml2.git

cp -r /opt/fuzz-targets/libxml2 /src
cp -r /opt/fuzz-targets/automake_1.16.5-1.3_all.deb /src

apt install ./automake_1.16.5-1.3_all.deb
    
cp /opt/oss-fuzz/projects/$PROJECT_NAME/build.sh $SRC/

mkdir -p /src/libxml2/test/newfuzzers
cp /src/libxml2/test/schemas/* /src/libxml2/test/newfuzzers

patch -tuN /src/libxml2/fuzz/oss-fuzz-build.sh -i /challenge/.oss-fuzz-build.patch -r -
patch -tuN /src/libxml2/fuzz/Makefile.am -i /challenge/.Makefile.patch -r -
cd $SRC/$PROJECT_NAME
if [ ! -d "/home/hacker/$PROJECT_NAME" ]; then
   mkdir /home/hacker/$PROJECT_NAME
   cp $SRC/$PROJECT_NAME/fuzz/schema.c $SRC/$PROJECT_NAME/fuzz/newfuzzer.c
   cp $SRC/$PROJECT_NAME/fuzz/*.c /home/hacker/$PROJECT_NAME
   cp /src/libxml2/fuzz/oss-fuzz-build.sh /home/hacker/$PROJECT_NAME
   chown -R hacker /home/hacker/$PROJECT_NAME
else
   cp /home/hacker/$PROJECT_NAME/*.c $SRC/$PROJECT_NAME/fuzz
   cp /home/hacker/$PROJECT_NAME/oss-fuzz-build.sh $SRC/$PROJECT_NAME/fuzz
fi

[ ! "$SANITIZER" = "introspector" ] && [ ! "$SANITIZER" = "coverage" ] && zip -ry /home/hacker/.vnc/$PROJECT_NAME-$(TZ=US/Arizona date +"%F--%H-%M-%S") /home/hacker/$PROJECT_NAME
sudo --preserve-env compile
drivers
