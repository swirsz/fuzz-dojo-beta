#!/opt/pwn.college/bash
. /usr/local/sbin/e
export LABEL=$1
export PROJECT_NAME=apache-httpd
SANITIZER=$1
if [ -z "$SANITIZER" ]; then
    SANITIZER='none'
    export LABEL='none'
fi

SRC=/src-$LABEL
if [ -z "$(find /out -mindepth 1 -maxdepth 1)" ] || [ ! -d "$SRC" ]; then
    echo "Run /challenge/build first"
else 

if [ "$LABEL" = "none" ]; then
    FLAGS=""
elif [ "$LABEL" = "address" ]; then
    FLAGS=$SANITIZER_FLAGS_address
elif [ "$LABEL" = "memory" ]; then
    FLAGS=$SANITIZER_FLAGS_memory
elif [ "$LABEL" = "undefined" ]; then
    FLAGS=$SANITIZER_FLAGS_undefined
elif [ "$LABEL" = "thread" ]; then
    FLAGS=$SANITIZER_FLAGS_thread
fi
set -ex

cp /home/hacker/fuzz-dojo/$PROJECT_NAME/*.c $SRC

cd $SRC/httpd

clang -O1 -fno-omit-frame-pointer -gline-tables-only -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION $FLAGS -fsanitize=fuzzer-no-link -c -I$SRC/fuzz-headers/lang/c -I./include -I./os/unix -I./srclib/apr/include -I./srclib/apr-util/include/ $SRC/fuzz_new.c
clang++ -O1 -fno-omit-frame-pointer -gline-tables-only -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION $FLAGS -fsanitize=fuzzer-no-link -stdlib=libc++ -fsanitize=fuzzer fuzz_new.o -o /out/fuzz_new ./modules.o buildmark.o -Wl,--start-group ./server/.libs/libmain.a ./modules/core/.libs/libmod_so.a ./modules/http/.libs/libmod_http.a ./server/mpm/event/.libs/libevent.a ./os/unix/.libs/libos.a ./srclib/apr/.libs/libapr-2.a -Wl,--end-group -luuid -lcrypt -lexpat -l:libbsd.a $SRC/pcre2/.libs/libpcre2-8.a

drivers
fi
