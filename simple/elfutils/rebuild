#!/opt/pwn.college/bash
. /usr/local/sbin/e
export LABEL=$1
export PROJECT_NAME=elfutils
SANITIZER=$1
if [ -z "$SANITIZER" ]; then
    SANITIZER='none'
    export LABEL='none'
fi

SRC=/src-$LABEL
if [ -z "$(find /out -mindepth 1 -maxdepth 1)" ] || [ ! -d "$SRC" ]; then
    echo "Run /challenge/build first"
else 

if [ "$LABEL" = "none" ]; then
    export FLAGS=""
elif [ "$LABEL" = "address" ]; then
    export FLAGS=$SANITIZER_FLAGS_address
elif [ "$LABEL" = "memory" ]; then
    export FLAGS=$SANITIZER_FLAGS_memory
elif [ "$LABEL" = "undefined" ]; then
    export FLAGS=$SANITIZER_FLAGS_undefined
elif [ "$LABEL" = "thread" ]; then
    export FLAGS=$SANITIZER_FLAGS_thread
fi
set -ex

cp /home/hacker/fuzz-dojo/$PROJECT_NAME/*.c $SRC


cd $SRC/$PROJECT_NAME

clang -O1 -fno-omit-frame-pointer -gline-tables-only -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION $FLAGS -fsanitize=fuzzer-no-link -Werror -Wall -Wextra -D_GNU_SOURCE -DHAVE_CONFIG_H -I. -I./lib -I./libelf -I./libebl -I./libdw -I./libdwelf -I./libdwfl -I./libasm -c $SRC/fuzz-newfuzz.c -o fuzz-newfuzz.o
clang++ -O1 -fno-omit-frame-pointer -gline-tables-only -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION $FLAGS -fsanitize=fuzzer-no-link -stdlib=libc++ -Werror -Wall -Wextra -fsanitize=fuzzer fuzz-newfuzz.o ./libasm/libasm.a ./libebl/libebl.a ./backends/libebl_backends.a ./libcpu/libcpu.a ./libdw/libdw.a ./libelf/libelf.a ./lib/libeu.a zlib/libz.a -o /out/fuzz-newfuzz

drivers
fi