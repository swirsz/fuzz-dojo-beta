#!/opt/pwn.college/bash
. /usr/local/sbin/e
LABEL=$1
PROJECT_NAME=cmark
SANITIZER=$1
if [ -z "$SANITIZER" ]; then
    SANITIZER='none'
    LABEL='none'
fi

SRC=/src-$LABEL
if [ -z "$(find /out -mindepth 1 -maxdepth 1)" ] || [ ! -d "$SRC" ]; then
    echo "Run /challenge/build first"
else 

if [ "$LABEL" = "none" ]; then
    FLAGS=""
elif [ "$LABEL" = "address" ]; then
    FLAGS=$SANITIZER_FLAGS_address
elif [ "$LABEL" = "memory" ]; then
    FLAGS=$SANITIZER_FLAGS_memory
elif [ "$LABEL" = "undefined" ]; then
    FLAGS=$SANITIZER_FLAGS_undefined
elif [ "$LABEL" = "thread" ]; then
    FLAGS=$SANITIZER_FLAGS_thread
fi
set -ex

cp /home/hacker/fuzz-dojo/$PROJECT_NAME/*.c $SRC/$PROJECT_NAME/fuzz

cd $SRC/$PROJECT_NAME/

clang -O1 -fno-omit-frame-pointer -gline-tables-only -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=fuzzer-no-link -Isrc -Ibuild/src -c fuzz/cmark-newfuzz.c -o cmark_newfuzzer.o
clang++ -O1 -fno-omit-frame-pointer -gline-tables-only -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION $FLAGS -fsanitize=fuzzer-no-link -stdlib=libc++ -fsanitize=fuzzer cmark_newfuzzer.o build/src/libcmark.a -o /out/cmark_newfuzzer

drivers
fi
