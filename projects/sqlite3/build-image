#!/bin/sh
. /usr/local/sbin/e
export PROJECT_NAME=sqlite3
export SANITIZER=$1
[ -z "$SANITIZER" ] && export SANITIZER='none'
cd $SRC

#apt-get update && apt-get install -y make autoconf automake libtool curl tcl zlib1g-dev

# We won't be able to poll fossil for changes, so this will build
# only once a day.
RUN mkdir $SRC/sqlite3 && \
    cd $SRC/sqlite3 && \
    curl 'https://www.sqlite.org/src/tarball?uuid=trunk' -o sqlite3.tar.gz && \
    tar xzf sqlite3.tar.gz

RUN find $SRC/sqlite3 -name "*.test" | xargs zip $SRC/ossfuzz_seed_corpus.zip

WORKDIR sqlite3
COPY build.sh *.dict *.options $SRC/


cp /opt/oss-fuzz/projects/$PROJECT_NAME/*.c $SRC/
cp /opt/oss-fuzz/projects/$PROJECT_NAME/*.cc $SRC/
zzzzzzzzzz


cp /opt/oss-fuzz/projects/$PROJECT_NAME/build.sh $SRC/

cd $SRC/
if [ ! -d "/home/hacker/$PROJECT_NAME" ]; then
   mkdir /home/hacker/$PROJECT_NAME
   cp $SRC/zzzzzzzzzz.c $SRC/newfuzzer.c
   cp $SRC/*.c /home/hacker/$PROJECT_NAME
   cp $SRC/*.cc /home/hacker/$PROJECT_NAME
   cp /opt/oss-fuzz/projects/$PROJECT_NAME/build.sh /home/hacker/$PROJECT_NAME
else
   cp /home/hacker/$PROJECT_NAME/*.c $SRC
   cp /home/hacker/$PROJECT_NAME/*.cc $SRC
   cp /home/hacker/$PROJECT_NAME/build.sh $SRC
fi
#patch -tuN /src/build.sh -i /challenge/build.patch -r -
compile