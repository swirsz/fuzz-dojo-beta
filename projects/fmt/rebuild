#!/opt/pwn.college/bash
. /usr/local/sbin/e
export LABEL=$1
export PROJECT_NAME=fmt
SANITIZER=$1
if [ -z "$SANITIZER" ]; then
    SANITIZER='none'
    export LABEL='none'
fi

SRC=/src-$LABEL
if [ -z "$(find /out -mindepth 1 -maxdepth 1)" ] || [ ! -d "$SRC" ]; then
    echo "Run /challenge/build first"
else 

if [ "$LABEL" = "none" ]; then
    FLAGS=""
elif [ "$LABEL" = "address" ]; then
    FLAGS=$SANITIZER_FLAGS_address
elif [ "$LABEL" = "memory" ]; then
    FLAGS=$SANITIZER_FLAGS_memory
elif [ "$LABEL" = "undefined" ]; then
    FLAGS=$SANITIZER_FLAGS_undefined
elif [ "$LABEL" = "thread" ]; then
    FLAGS=$SANITIZER_FLAGS_thread
fi
set -x
#----------------------------------------------------------------------

cp /home/hacker/fuzz-dojo/$PROJECT_NAME/* $SRC/$PROJECT_NAME/test/fuzzing
mv $SRC /src

cd /src/$PROJECT_NAME/build

#cmake .. -GNinja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_STANDARD=14 -DFMT_DOC=Off -DFMT_TEST=Off -DFMT_SAFE_DURATION_CAST=On -DFMT_FUZZ=On -DFMT_FUZZ_LINKMAIN=Off -DFMT_FUZZ_LDFLAGS=-fsanitize=fuzzer $FLAGS
cmake --build . $FLAGS

cd
mv /src $SRC
#----------------------------------------------------------------------
drivers
fi
