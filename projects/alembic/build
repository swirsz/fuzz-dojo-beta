#!/opt/pwn.college/bash
. /usr/local/sbin/e
if [ "$?" -gt 0 ]; then
    exit 1
fi
export LABEL=$1
export PROJECT_NAME=alembic
export SANITIZER=$1
if [ -z "$SANITIZER" ]; then
    export SANITIZER='none'
    export LABEL='none'$LABEL
fi

if [ ! -d "/src-orig" ]; then
#----------------------------------------------------------------------
    #apt-get update && apt-get install -y build-essential zlib1g-dev zlib1g-dev:i386 python make automake
    #git clone --depth 1 https://github.com/alembic/alembic

    # Ubuntu's libilmbase-dev package doesn't include static libraries, so we have
    # to build OpenEXR from source.
    #RUN git clone -b v2.5.9 --depth 1 https://github.com/AcademySoftwareFoundation/openexr

    #COPY build.sh *.h *.cc $SRC/
    #WORKDIR $WORK/


    cp -r /downloads/alembic $SRC
    cp -r /downloads/openexr $SRC

    cp /opt/oss-fuzz/projects/$PROJECT_NAME/build.sh $SRC/
    cp /opt/oss-fuzz/projects/$PROJECT_NAME/*.h $SRC/
    cp /opt/oss-fuzz/projects/$PROJECT_NAME/*.cc $SRC/
    
    #cp /challenge/.fuzz-packet_seed_corpus.zip $OUT/fuzz-packet_seed_corpus.zip
    #patch -tuN $SRC/avahi/fuzz/oss-fuzz.sh -i /challenge/.oss-fuzz.patch -r -
    cp $SRC/alembic_dump_info_fuzzer.cc $SRC/newfuzz_fuzzer.cc
#----------------------------------------------------------------------
    build-cleanup
fi
build-srcfolders
mv /src-$LABEL /src

cd $SRC/$PROJECT_NAME
#----------------------------------------------------------------------
if [ ! -d "/home/hacker/fuzz-dojo/$PROJECT_NAME" ]; then
   mkdir -p /home/hacker/fuzz-dojo/$PROJECT_NAME
   cp $SRC/*.cc /home/hacker/fuzz-dojo/$PROJECT_NAME
   cp $SRC/build.sh /home/hacker/fuzz-dojo/$PROJECT_NAME
else
   cp /home/hacker/fuzz-dojo/$PROJECT_NAME/*.cc $SRC
   cp /home/hacker/fuzz-dojo/$PROJECT_NAME/build.sh $SRC
fi
#----------------------------------------------------------------------
if [ "$4" = "understanding" ]; then
    understanding $2 $3
elif [ "$4" = "planning" ]; then
    planning $2 $3
else
    fuzzlog
    compile
    drivers
fi
mv /src /src-$LABEL
